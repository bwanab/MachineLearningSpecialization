### A Pluto.jl notebook ###
# v0.19.4

using Markdown
using InteractiveUtils

# ╔═╡ 9d1cace2-d86e-4299-bc82-a307a8b6a94d
begin
	import Pkg
	Pkg.develop(path=homedir()*""/src/MachineLearningSpecialization")
	using MachineLearningSpecialization
end


# ╔═╡ bd8100f4-f1be-11ec-2884-450ea1728fea
using LinearAlgebra, Statistics, PlutoUI,Plots,Printf

# ╔═╡ 2d62d288-d7db-4561-b200-e1c8c5e31cd6
TableOfContents()

# ╔═╡ 98a8b0fb-906e-4816-8870-20fae0524592
y_train = [300.  , 509.8 , 394.  , 540.  , 415.  , 230.  , 560.  , 294.  ,
       718.2 , 200.  , 302.  , 468.  , 374.2 , 388.  , 282.  , 311.8 ,
       401.  , 449.8 , 301.  , 502.  , 340.  , 400.28, 572.  , 264.  ,
       304.  , 298.  , 219.8 , 490.7 , 216.96, 368.2 , 280.  , 526.87,
       237.  , 562.43, 369.8 , 460.  , 374.  , 390.  , 158.  , 426.  ,
       390.  , 277.77, 216.96, 425.8 , 504.  , 329.  , 464.  , 220.  ,
       358.  , 478.  , 334.  , 426.98, 290.  , 463.  , 390.8 , 354.  ,
       350.  , 460.  , 237.  , 288.3 , 282.  , 249.  , 304.  , 332.  ,
       351.8 , 310.  , 216.96, 666.34, 330.  , 480.  , 330.3 , 348.  ,
       304.  , 384.  , 316.  , 430.4 , 450.  , 284.  , 275.  , 414.  ,
       258.  , 378.  , 350.  , 412.  , 373.  , 225.  , 390.  , 267.4 ,
       464.  , 174.  , 340.  , 430.  , 440.  , 216.  , 329.  , 388.  ,
       390.  , 356.  , 257.8 ]

# ╔═╡ 2bf67ac2-18c7-4ff2-8877-51c1dbad9618
X_array = [[1.24e+03, 3.00e+00, 1.00e+00, 6.40e+01],
       [1.95e+03, 3.00e+00, 2.00e+00, 1.70e+01],
       [1.72e+03, 3.00e+00, 2.00e+00, 4.20e+01],
       [1.96e+03, 3.00e+00, 2.00e+00, 1.50e+01],
       [1.31e+03, 2.00e+00, 1.00e+00, 1.40e+01],
       [8.64e+02, 2.00e+00, 1.00e+00, 6.60e+01],
       [1.84e+03, 3.00e+00, 1.00e+00, 1.70e+01],
       [1.03e+03, 3.00e+00, 1.00e+00, 4.30e+01],
       [3.19e+03, 4.00e+00, 2.00e+00, 8.70e+01],
       [7.88e+02, 2.00e+00, 1.00e+00, 8.00e+01],
       [1.20e+03, 2.00e+00, 2.00e+00, 1.70e+01],
       [1.56e+03, 2.00e+00, 1.00e+00, 1.80e+01],
       [1.43e+03, 3.00e+00, 1.00e+00, 2.00e+01],
       [1.22e+03, 2.00e+00, 1.00e+00, 1.50e+01],
       [1.09e+03, 2.00e+00, 1.00e+00, 6.40e+01],
       [8.48e+02, 1.00e+00, 1.00e+00, 1.70e+01],
       [1.68e+03, 3.00e+00, 2.00e+00, 2.30e+01],
       [1.77e+03, 3.00e+00, 2.00e+00, 1.80e+01],
       [1.04e+03, 3.00e+00, 1.00e+00, 4.40e+01],
       [1.65e+03, 2.00e+00, 1.00e+00, 2.10e+01],
       [1.09e+03, 2.00e+00, 1.00e+00, 3.50e+01],
       [1.32e+03, 3.00e+00, 1.00e+00, 1.40e+01],
       [1.59e+03, 0.00e+00, 1.00e+00, 2.00e+01],
       [9.72e+02, 2.00e+00, 1.00e+00, 7.30e+01],
       [1.10e+03, 3.00e+00, 1.00e+00, 3.70e+01],
       [1.00e+03, 2.00e+00, 1.00e+00, 5.10e+01],
       [9.04e+02, 3.00e+00, 1.00e+00, 5.50e+01],
       [1.69e+03, 3.00e+00, 1.00e+00, 1.30e+01],
       [1.07e+03, 2.00e+00, 1.00e+00, 1.00e+02],
       [1.42e+03, 3.00e+00, 2.00e+00, 1.90e+01],
       [1.16e+03, 3.00e+00, 1.00e+00, 5.20e+01],
       [1.94e+03, 3.00e+00, 2.00e+00, 1.20e+01],
       [1.22e+03, 2.00e+00, 2.00e+00, 7.40e+01],
       [2.48e+03, 4.00e+00, 2.00e+00, 1.60e+01],
       [1.20e+03, 2.00e+00, 1.00e+00, 1.80e+01],
       [1.84e+03, 3.00e+00, 2.00e+00, 2.00e+01],
       [1.85e+03, 3.00e+00, 2.00e+00, 5.70e+01],
       [1.66e+03, 3.00e+00, 2.00e+00, 1.90e+01],
       [1.10e+03, 2.00e+00, 2.00e+00, 9.70e+01],
       [1.78e+03, 3.00e+00, 2.00e+00, 2.80e+01],
       [2.03e+03, 4.00e+00, 2.00e+00, 4.50e+01],
       [1.78e+03, 4.00e+00, 2.00e+00, 1.07e+02],
       [1.07e+03, 2.00e+00, 1.00e+00, 1.00e+02],
       [1.55e+03, 3.00e+00, 1.00e+00, 1.60e+01],
       [1.95e+03, 3.00e+00, 2.00e+00, 1.60e+01],
       [1.22e+03, 2.00e+00, 2.00e+00, 1.20e+01],
       [1.62e+03, 3.00e+00, 1.00e+00, 1.60e+01],
       [8.16e+02, 2.00e+00, 1.00e+00, 5.80e+01],
       [1.35e+03, 3.00e+00, 1.00e+00, 2.10e+01],
       [1.57e+03, 3.00e+00, 1.00e+00, 1.40e+01],
       [1.49e+03, 3.00e+00, 1.00e+00, 5.70e+01],
       [1.51e+03, 2.00e+00, 1.00e+00, 1.60e+01],
       [1.10e+03, 3.00e+00, 1.00e+00, 2.70e+01],
       [1.76e+03, 3.00e+00, 2.00e+00, 2.40e+01],
       [1.21e+03, 2.00e+00, 1.00e+00, 1.40e+01],
       [1.47e+03, 3.00e+00, 2.00e+00, 2.40e+01],
       [1.77e+03, 3.00e+00, 2.00e+00, 8.40e+01],
       [1.65e+03, 3.00e+00, 1.00e+00, 1.90e+01],
       [1.03e+03, 3.00e+00, 1.00e+00, 6.00e+01],
       [1.12e+03, 2.00e+00, 2.00e+00, 1.60e+01],
       [1.15e+03, 3.00e+00, 1.00e+00, 6.20e+01],
       [8.16e+02, 2.00e+00, 1.00e+00, 3.90e+01],
       [1.04e+03, 3.00e+00, 1.00e+00, 2.50e+01],
       [1.39e+03, 3.00e+00, 1.00e+00, 6.40e+01],
       [1.60e+03, 3.00e+00, 2.00e+00, 2.90e+01],
       [1.22e+03, 3.00e+00, 1.00e+00, 6.30e+01],
       [1.07e+03, 2.00e+00, 1.00e+00, 1.00e+02],
       [2.60e+03, 4.00e+00, 2.00e+00, 2.20e+01],
       [1.43e+03, 3.00e+00, 1.00e+00, 5.90e+01],
       [2.09e+03, 3.00e+00, 2.00e+00, 2.60e+01],
       [1.79e+03, 4.00e+00, 2.00e+00, 4.90e+01],
       [1.48e+03, 3.00e+00, 2.00e+00, 1.60e+01],
       [1.04e+03, 3.00e+00, 1.00e+00, 2.50e+01],
       [1.43e+03, 3.00e+00, 1.00e+00, 2.20e+01],
       [1.16e+03, 3.00e+00, 1.00e+00, 5.30e+01],
       [1.55e+03, 3.00e+00, 2.00e+00, 1.20e+01],
       [1.98e+03, 3.00e+00, 2.00e+00, 2.20e+01],
       [1.06e+03, 3.00e+00, 1.00e+00, 5.30e+01],
       [1.18e+03, 2.00e+00, 1.00e+00, 9.90e+01],
       [1.36e+03, 2.00e+00, 1.00e+00, 1.70e+01],
       [9.60e+02, 3.00e+00, 1.00e+00, 5.10e+01],
       [1.46e+03, 3.00e+00, 2.00e+00, 1.60e+01],
       [1.45e+03, 3.00e+00, 2.00e+00, 2.50e+01],
       [1.21e+03, 2.00e+00, 1.00e+00, 1.50e+01],
       [1.55e+03, 3.00e+00, 2.00e+00, 1.60e+01],
       [8.82e+02, 3.00e+00, 1.00e+00, 4.90e+01],
       [2.03e+03, 4.00e+00, 2.00e+00, 4.50e+01],
       [1.04e+03, 3.00e+00, 1.00e+00, 6.20e+01],
       [1.62e+03, 3.00e+00, 1.00e+00, 1.60e+01],
       [8.03e+02, 2.00e+00, 1.00e+00, 8.00e+01],
       [1.43e+03, 3.00e+00, 2.00e+00, 2.10e+01],
       [1.66e+03, 3.00e+00, 1.00e+00, 6.10e+01],
       [1.54e+03, 3.00e+00, 1.00e+00, 1.60e+01],
       [9.48e+02, 3.00e+00, 1.00e+00, 5.30e+01],
       [1.22e+03, 2.00e+00, 2.00e+00, 1.20e+01],
       [1.43e+03, 2.00e+00, 1.00e+00, 4.30e+01],
       [1.66e+03, 3.00e+00, 2.00e+00, 1.90e+01],
       [1.21e+03, 3.00e+00, 1.00e+00, 2.00e+01],
       [1.05e+03, 2.00e+00, 1.00e+00, 6.50e+01]]

# ╔═╡ eb4bb91e-b027-4d4a-a4cd-6482a4303b75
X_train = reshape(collect(Iterators.flatten(X_array)), 4, length(X_array))'

# ╔═╡ 39cea02c-aba9-4d07-a0dd-b0c38ab94c00
X_features = ["size(sqft)","bedrooms","floors","age"]

# ╔═╡ ac746998-8cfb-4445-b687-7644beb01cef
begin
	p = []
	for i in 1:4
		push!(p, scatter(X_train[:,i], y_train, xaxis=(X_features[i]), legend=false))
	end
	plot(p[1], p[2], p[3], p[4], yaxis=("Price (1000s)"), size=(800, 800))
end

# ╔═╡ 45618750-ab82-4c64-80e5-920baa5380e4
begin
	    initial_w = zeros(4)
		initial_b = 0
		iterations = 10
		alpha = 9.9e-7
		w_final, b_final, J_hist = gradient_descent(X_train, y_train, initial_w, initial_b, compute_cost, compute_gradient, alpha, iterations)
	
end

# ╔═╡ 178eab46-c341-47bb-98ce-c87f53d16055
_,_,hist = MachineLearningSpecialization.run_gradient_descent(X_train, y_train, 10, 9.9e-7);

# ╔═╡ 6df74060-3290-40ee-9354-146c2d764931
hist

# ╔═╡ 75eb4fae-391c-4e57-a7e2-0d5e40baa894
function plot_cost_i_w(hist)
	p1 = plot(hist.Iteration, hist.Cost)
	p2 = plot(hist.w1, hist.Cost)
	plot(p1, p2, size=(800, 300))
end

# ╔═╡ 25ce55f2-c456-4d77-a604-0e8c31127ef6
plot_cost_i_w(hist)

# ╔═╡ 39c79966-23de-4d59-9b03-8a92a8cfc343
_,_,hist2 = run_gradient_descent(X_train, y_train, 10, 9e-7);

# ╔═╡ ce30b5d5-4077-480d-9bc7-040af12f14f4
hist2

# ╔═╡ 85743e3b-5601-4e4d-b311-849eeddfe809
plot_cost_i_w(hist2)

# ╔═╡ eaf94b56-5bbb-4807-986a-7b012dde1242
_,_,hist3 = run_gradient_descent(X_train, y_train, 10, 1e-7);

# ╔═╡ a258ce06-16f3-4406-8f0f-b9d8bdeb9dbf
hist3

# ╔═╡ 20ecbfdc-6306-43bf-b386-46db654e88d0
plot_cost_i_w(hist3)

# ╔═╡ 2ce46743-e8d2-4682-9836-43cd562f8532
function zscore_normalize_features(X)
	mu = mean(X, dims=1)
	sigma = std(X, dims=1)
	X_norm = (X .- mu) ./ sigma
	X_norm, mu, sigma
end

# ╔═╡ 6356dd31-a5fe-401d-a435-1e998c61a6da
X_norm, X_mu, X_sigma = zscore_normalize_features(X_train);

# ╔═╡ 3a366ecb-a0b6-4426-8a05-d2a64e4f4442
w_norm, b_norm, hist4 = run_gradient_descent(X_norm, y_train, 1000, 1.0e-1);

# ╔═╡ 58bdaa10-4d54-442e-87b7-94f93a5242c4
hist4[1:100:1000,:]

# ╔═╡ 2169e9b1-7e47-4f5d-94fd-dad609f759a2
w_norm, b_norm

# ╔═╡ ec064c1f-814c-4221-801d-34d59d7edb1f
yp = [X_norm[i,:] ⋅ w_norm + b_norm for i in 1:size(X_norm)[1]]

# ╔═╡ 3607578f-4f13-463d-b802-4093ba8edc63
begin
	p1 = []
	for i in 1:4
		scatter(X_train[:,i], y_train, xaxis=(X_features[i]), label="target")
		push!(p1, scatter!(X_train[:,i], yp, color=:orange, label="predict"))
	end
	plot(p1[1], p1[2], p1[3], p1[4], yaxis=("Price (1000s)"), size=(800, 800))
end

# ╔═╡ 04ce00a9-0efa-4865-84f3-c3cad5ce358c


# ╔═╡ Cell order:
# ╠═9d1cace2-d86e-4299-bc82-a307a8b6a94d
# ╠═bd8100f4-f1be-11ec-2884-450ea1728fea
# ╠═2d62d288-d7db-4561-b200-e1c8c5e31cd6
# ╟─98a8b0fb-906e-4816-8870-20fae0524592
# ╟─2bf67ac2-18c7-4ff2-8877-51c1dbad9618
# ╠═eb4bb91e-b027-4d4a-a4cd-6482a4303b75
# ╠═39cea02c-aba9-4d07-a0dd-b0c38ab94c00
# ╠═ac746998-8cfb-4445-b687-7644beb01cef
# ╠═45618750-ab82-4c64-80e5-920baa5380e4
# ╠═178eab46-c341-47bb-98ce-c87f53d16055
# ╠═6df74060-3290-40ee-9354-146c2d764931
# ╠═75eb4fae-391c-4e57-a7e2-0d5e40baa894
# ╠═25ce55f2-c456-4d77-a604-0e8c31127ef6
# ╠═39c79966-23de-4d59-9b03-8a92a8cfc343
# ╠═ce30b5d5-4077-480d-9bc7-040af12f14f4
# ╠═85743e3b-5601-4e4d-b311-849eeddfe809
# ╠═eaf94b56-5bbb-4807-986a-7b012dde1242
# ╠═a258ce06-16f3-4406-8f0f-b9d8bdeb9dbf
# ╠═20ecbfdc-6306-43bf-b386-46db654e88d0
# ╠═2ce46743-e8d2-4682-9836-43cd562f8532
# ╠═6356dd31-a5fe-401d-a435-1e998c61a6da
# ╠═3a366ecb-a0b6-4426-8a05-d2a64e4f4442
# ╠═58bdaa10-4d54-442e-87b7-94f93a5242c4
# ╠═2169e9b1-7e47-4f5d-94fd-dad609f759a2
# ╠═ec064c1f-814c-4221-801d-34d59d7edb1f
# ╠═3607578f-4f13-463d-b802-4093ba8edc63
# ╠═04ce00a9-0efa-4865-84f3-c3cad5ce358c
